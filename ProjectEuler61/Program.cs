using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

/*
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) 
 * numbers and are generated by the following formulae:
Triangle 	  	P3,n=n(n+1)/2 	  	1, 3, 6, 10, 15, ...
Square 	  	    P4,n=n2 	  	    1, 4, 9, 16, 25, ...
Pentagonal 	  	P5,n=n(3n−1)/2 	  	1, 5, 12, 22, 35, ...
Hexagonal 	  	P6,n=n(2n−1) 	  	1, 6, 15, 28, 45, ...
Heptagonal 	  	P7,n=n(5n−3)/2 	  	1, 7, 18, 34, 55, ...
Octagonal 	  	P8,n=n(3n−2) 	  	1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    The set is cyclic, in that the last two digits of each number is the first two digits of the next number 
    (including the last number with the first).
    Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented 
    by a different number in the set.This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
    triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

 */
namespace ProjectEuler61
{
    class Program
    {
        public static int answer = 0;
        static void Main(string[] args)
        {
            List<string> triangles = makeTriangles();
            List<string> squares = makeSquares();
            List<string> pentagons = makePentagons();
            List<string> hexagons = makeHexagons();
            List<string> heptagons = makeHeptagons();
            List<string> octagons = makeOctogons();

            //abcd-efgh-ijkl->
            //Console.WriteLine(triangles.Count); //55
            //Console.WriteLine(squares.Count); //68
            //Console.WriteLine(pentagons.Count); //56
            //Console.WriteLine(hexagons.Count); //48
            //Console.WriteLine(heptagons.Count); //43
            //Console.WriteLine(octagons.Count); //40


            #region pruning
            for (int i = 0; i < 5; i++)
            {
                //prune out values from one based on all the others

                //prune triangles
                Tuple<HashSet<string>, HashSet<string>> tuple = allOtherTwoDigits(squares, pentagons, hexagons,
                                                                                  heptagons,
                                                                                  octagons);
                List<string> pTriangles = filterImpossible(triangles, tuple);
                //Console.WriteLine("-" + pTriangles.Count);

                //prune squares
                tuple = allOtherTwoDigits(triangles, pentagons, hexagons, heptagons, octagons);
                List<string> pSquares = filterImpossible(squares, tuple);
                //Console.WriteLine("-" + pSquares.Count);

                //prune pentagons
                tuple = allOtherTwoDigits(triangles, squares, hexagons, heptagons, octagons);
                List<string> pPentagons = filterImpossible(pentagons, tuple);
                //Console.WriteLine("-" + pPentagons.Count);

                //prune hexagons
                tuple = allOtherTwoDigits(triangles, squares, pentagons, heptagons, octagons);
                List<string> pHexagons = filterImpossible(hexagons, tuple);
                //Console.WriteLine("-" + pHexagons.Count);

                //prune heptagons
                tuple = allOtherTwoDigits(triangles, squares, pentagons, hexagons, octagons);
                List<string> pHeptagons = filterImpossible(heptagons, tuple);
                //Console.WriteLine("-" + pHeptagons.Count);

                //prune heptagons
                tuple = allOtherTwoDigits(triangles, squares, pentagons, hexagons, heptagons);
                List<string> pOctaagons = filterImpossible(octagons, tuple);
                //Console.WriteLine("-" + pOctaagons.Count);

                triangles = pTriangles;
                squares = pSquares;
                pentagons = pPentagons;
                hexagons = pHexagons;
                heptagons = pHeptagons;
                octagons = pOctaagons;
                //Console.WriteLine("=======================\n");
            }
            #endregion

            List<List<string>> allOtherLists = new List<List<string>>();
            allOtherLists.Add(squares);
            allOtherLists.Add(pentagons);
            allOtherLists.Add(hexagons);
            allOtherLists.Add(heptagons);
            allOtherLists.Add(octagons);
           

            foreach(string s in triangles)
            {
                bool done = runThroughLists(s.Substring(0, 2), s.Substring(2), allOtherLists);
                if(done)
                {
                    Console.WriteLine(s);
                    int a = Int32.Parse(s);
                    answer += a;
                    break;
                }
            }

            Console.WriteLine(answer);

        }

        public static bool runThroughLists(string startingFront, string currentBack, List<List<string>> listofLists)
        {
            int remainingListsCount = listofLists.Count;
            
            
            if(remainingListsCount == 1)//Only one list left
            {
                List<string> lastList = listofLists[0];
                foreach(string s in lastList)
                {
                    //The value in the last list must match the previous term's back and the original's front
                    if(s.Substring(0,2) == currentBack)
                    {
                        int x = 3;
                        if(s.Substring(2) == startingFront)
                        {
                            Console.WriteLine(s);
                            int a = Int32.Parse(s);
                            answer += a;
                            return true;
                        }
                    }
                }
                return false;
            }

            for(int i = 0; i < remainingListsCount; i++)
            {
                List<string> L = listofLists[i];
                foreach(string s in L)
                {
                    if(s.Substring(0,2) == currentBack)
                    {
                        List<List<string>> tempList = new List<List<string>>();
                        for (int j = 0; j < remainingListsCount; j++)
                        {
                            if(j != i)
                            {
                                tempList.Add(listofLists[j]);
                            }
                        }
                        //Console.Write("|"+s + " ");
                        bool success = runThroughLists(startingFront, s.Substring(2), tempList);
                        if(success)
                        {
                            Console.WriteLine(s);
                            int a = Int32.Parse(s);
                            answer += a;
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public static List<string> filterImpossible(List<string> mainList, Tuple<HashSet<string>, HashSet<string>> tuple)
        {
            HashSet<string> first = tuple.Item1;
            HashSet<string> second = tuple.Item2;
            List<string> temp = new List<string>();
            foreach(string str in mainList)
            {
                string s = str.Substring(0, 2);
                if(first.Contains(s))
                {
                    s = str.Substring(2);
                    if (second.Contains(s))
                    {
                        temp.Add(str);
                    }
                }
            }
         
            return temp;
        }


        public static Tuple<HashSet<string>, HashSet<string>> allOtherTwoDigits(List<string> a, List<string> b,
                                                                                 List<string> c, List<string> d,
                                                                                 List<string> e)
        {
            HashSet<string> firstTwoDigits = new HashSet<string>();
            HashSet<string> lastTwoDigits = new HashSet<string>();
            foreach(string s in a)
            {
                firstTwoDigits.Add(s.Substring(0, 2));
                lastTwoDigits.Add(s.Substring(2));
            }
            foreach (string s in b)
            {
                firstTwoDigits.Add(s.Substring(0, 2));
                lastTwoDigits.Add(s.Substring(2));
            }
            foreach (string s in c)
            {
                firstTwoDigits.Add(s.Substring(0, 2));
                lastTwoDigits.Add(s.Substring(2));
            }
            foreach (string s in d)
            {
                firstTwoDigits.Add(s.Substring(0, 2));
                lastTwoDigits.Add(s.Substring(2));
            }
            foreach (string s in e)
            {
                firstTwoDigits.Add(s.Substring(0, 2));
                lastTwoDigits.Add(s.Substring(2));
            }

            return new Tuple<HashSet<string>, HashSet<string>>(firstTwoDigits,lastTwoDigits);
        }

        static List<string> makeSquares()
        {
            List<string> square = new List<string>();
            for (int i = 0; i < 100; i++)
            {
                int temp = i * i;
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    
                    break;
                }
                square.Add(temp.ToString());
            }
            return square;
        }

        static List<string> makeTriangles()
        {
            List<string> triangles = new List<string>();
            for (int i = 0; i < 1000; i++)
            {
                int temp = i*(i + 1)/2;
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    break;
                }
                triangles.Add(temp.ToString());
            }
            return triangles;
        }

        static List<string> makePentagons()
        {
            List<string> list = new List<string>();
            for (int i = 0; i < 1000; i++)
            {
                int temp = i*(3*i - 1)/2;
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    break;
                }
                list.Add(temp.ToString());
            }
            return list;
        }

        static List<string> makeHexagons()
        {
            List<string> list = new List<string>();
            for (int i = 0; i < 1000; i++)
            {
                int temp = i*(2*i - 1);
                
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    break;
                }
                list.Add(temp.ToString());
            }
            return list;
        }

        static List<string> makeHeptagons()
        {
            List<string> list = new List<string>();
            for (int i = 0; i < 1000; i++)
            {
                int temp = i*(5*i - 3)/2;
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    break;
                }
                list.Add(temp.ToString());
            }
            return list;
        }

        static List<string> makeOctogons()
        {
            List<string> list = new List<string>();
            for (int i = 0; i < 1000; i++)
            {
                //n(3n−2)
                int temp = i * (3 * i - 2);
                if (temp < 1000)
                {
                    continue;
                }
                if (temp > 9999)
                {
                    break;
                }
                list.Add(temp.ToString());
            }
            return list;
        }
    }
}
